// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: demoservice.proto

package demoservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConcatenationServiceClient is the client API for ConcatenationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConcatenationServiceClient interface {
	Concatenate(ctx context.Context, in *ConcatenationRequest, opts ...grpc.CallOption) (*ConcatenatedString, error)
}

type concatenationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConcatenationServiceClient(cc grpc.ClientConnInterface) ConcatenationServiceClient {
	return &concatenationServiceClient{cc}
}

func (c *concatenationServiceClient) Concatenate(ctx context.Context, in *ConcatenationRequest, opts ...grpc.CallOption) (*ConcatenatedString, error) {
	out := new(ConcatenatedString)
	err := c.cc.Invoke(ctx, "/demoservice.ConcatenationService/Concatenate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcatenationServiceServer is the server API for ConcatenationService service.
// All implementations must embed UnimplementedConcatenationServiceServer
// for forward compatibility
type ConcatenationServiceServer interface {
	Concatenate(context.Context, *ConcatenationRequest) (*ConcatenatedString, error)
	mustEmbedUnimplementedConcatenationServiceServer()
}

// UnimplementedConcatenationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConcatenationServiceServer struct {
}

func (UnimplementedConcatenationServiceServer) Concatenate(context.Context, *ConcatenationRequest) (*ConcatenatedString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concatenate not implemented")
}
func (UnimplementedConcatenationServiceServer) mustEmbedUnimplementedConcatenationServiceServer() {}

// UnsafeConcatenationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConcatenationServiceServer will
// result in compilation errors.
type UnsafeConcatenationServiceServer interface {
	mustEmbedUnimplementedConcatenationServiceServer()
}

func RegisterConcatenationServiceServer(s grpc.ServiceRegistrar, srv ConcatenationServiceServer) {
	s.RegisterService(&ConcatenationService_ServiceDesc, srv)
}

func _ConcatenationService_Concatenate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcatenationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcatenationServiceServer).Concatenate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoservice.ConcatenationService/Concatenate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcatenationServiceServer).Concatenate(ctx, req.(*ConcatenationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConcatenationService_ServiceDesc is the grpc.ServiceDesc for ConcatenationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConcatenationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demoservice.ConcatenationService",
	HandlerType: (*ConcatenationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Concatenate",
			Handler:    _ConcatenationService_Concatenate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demoservice.proto",
}
